
# Two (or more) rb

## Simulate a field scenario

Same as "Steps.Rmd"

```{r}
field.close_2 <- fx.pre.field(loc.data = TRUE,
                               smalldist = 0,
                               width = c(1,1)) 

range = 3
pf <- field.close_2
mesh <- pf$mesh 
fem <- pf$mat 
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
poly.water <- pf$poly.water

zlim = c(0.1, 1)
xlim = poly.water@bbox[1, ] 
ylim = poly.water@bbox[2, ]

proj = inla.mesh.projector(mesh, xlim = xlim, 
                           ylim = ylim, dims=c(300, 300))

ggplot(data = pf$poly.water_sf) + 
      inlabru::gg(pf$mesh_h) + #plot mesh_hb alternatively
      geom_sf(data =pf$loc.data_sf,
          col='purple',size=1.7,alpha=0.5) 
```
## Choose two pair of points

One for each block with different r

```{r}
width <- 1
y.mid <- 5
y.up <- y.mid + (width/2)
y.low <- y.mid - (width/2)

location <- matrix(c(c(3.5, 6.5), rep(y.mid, 2)), ncol = 2)
```

```{r}
max.edge.length = 0.4
width = 1
  
A <- list()
A[[1]] <- inla.spde.make.A(mesh=mesh,
                     loc = matrix(c(location[1,1],y.up), nrow=1, ncol=2))
A[[2]] <- inla.spde.make.A(mesh=mesh,
                     loc = matrix(c(location[1,1],(y.up + max.edge.length/2)), nrow=1, ncol=2))
A[[3]] <- inla.spde.make.A(mesh=mesh,
                     loc = matrix(c(location[1,1],(y.up + max.edge.length)), nrow=1, ncol=2))

id.nodeA <- c()
id.nodeA[1] = which.max(A[[1]][1, ])
id.nodeA[2] = which.max(A[[2]][1, ])
id.nodeA[3] = which.max(A[[3]][1, ])

# just to check the coordinates and compare to the plot above
data.frame(x = c(mesh$loc[id.nodeA[1], 1], mesh$loc[id.nodeA[2], 1], mesh$loc[id.nodeA[3], 1]),
           y = c(mesh$loc[id.nodeA[1], 2], mesh$loc[id.nodeA[2], 2], mesh$loc[id.nodeA[3], 2]))

A.y.vector <- c(mesh$loc[id.nodeA[[1]],][2],
                  mesh$loc[id.nodeA[[2]],][2],
                  mesh$loc[id.nodeA[[3]],][2])

A.tmp <- A[[which(A.y.vector > y.up)[1]]]
id.node <- id.nodeA[which(A.y.vector > y.up)[1]]
id.coord <- c(mesh$loc[id.node, 1], mesh$loc[id.node, 2])
return.list.up <- list(A.tmp = A.tmp, id.coord = id.coord, id.node = id.node)

## lower point, i.e. point in barrier area
A <- list()
A[[1]] <- inla.spde.make.A(mesh=mesh,
                     loc = matrix(c(location[1,1],y.up), nrow=1, ncol=2))
A[[2]] <- inla.spde.make.A(mesh=mesh,
                     loc = matrix(c(location[1,1],(y.up - max.edge.length/2)), nrow=1, ncol=2))
A[[3]] <- inla.spde.make.A(mesh=mesh,
                     loc = matrix(c(location[1,1],(y.up - max.edge.length)), nrow=1, ncol=2))
id.nodeA <- c()
id.nodeA[1] = which.max(A[[1]][1, ])
id.nodeA[2] = which.max(A[[2]][1, ])
id.nodeA[3] = which.max(A[[3]][1, ])

A.y.vector <- c(mesh$loc[id.nodeA[[1]],][2],
                  mesh$loc[id.nodeA[[2]],][2],
                  mesh$loc[id.nodeA[[3]],][2])

A.tmp <- A[[which(A.y.vector < y.up)[1]]]
id.node <- id.nodeA[which(A.y.vector < y.up)[1]]
id.coord <- c(mesh$loc[id.node, 1], mesh$loc[id.node, 2])

return.list.low <- list(A.tmp = A.tmp, id.coord = id.coord, id.node = id.node)

return.list <- list(normal.point = return.list.up, barrier.point = return.list.low)

##### Line 387

coord.df_norm <- return.list$normal.point$id.coord
coord.df_bar <- return.list$barrier.point$id.coord

points_nb <- rbind(coord.df_norm, coord.df_bar)
rownames(points_nb) <- NULL
colnames(points_nb) <- c("x", "y")
points_nb <- as.matrix(points_nb)
poly_nb <- Polygon(points_nb)
SpatialPoints(poly_nb@coords)

sp_points_nb <- SpatialPoints(poly_nb@coords)
sf_points_nb <- st_as_sf(sp_points_nb)

ggplot(data = pf$poly.water_sf) + 
      inlabru::gg(pf$mesh) + #plot mesh_hb alternatively
      geom_sf(data =sf_points_nb,
          col='purple',size=1.7,alpha=0.5) 

ggplot(data = pf$poly.water_sf) + 
      inlabru::gg(pf$mesh) +
  geom_sf(data =sf_points_nb,
          col='purple',size=1.7,alpha=0.5) +
  ylim(c(4,6.5)) +
  xlim(c(2,5))

return.list.left #<- return.list
coord.df_norm.left #<- coord.df_norm
coord.df_bar.left #<- coord.df_bar
```

```{r}
A <- list()
A[[1]] <- inla.spde.make.A(mesh=mesh,
                     loc = matrix(c(location[2,1],y.up), nrow=1, ncol=2))
A[[2]] <- inla.spde.make.A(mesh=mesh,
                     loc = matrix(c(location[2,1],(y.up + max.edge.length/2)), nrow=1, ncol=2))
A[[3]] <- inla.spde.make.A(mesh=mesh,
                     loc = matrix(c(location[2,1],(y.up + max.edge.length)), nrow=1, ncol=2))

id.nodeA <- c()
id.nodeA[1] = which.max(A[[1]][1, ])
id.nodeA[2] = which.max(A[[2]][1, ])
id.nodeA[3] = which.max(A[[3]][1, ])

# just to check the coordinates and compare to the plot above
data.frame(x = c(mesh$loc[id.nodeA[1], 1], mesh$loc[id.nodeA[2], 1], mesh$loc[id.nodeA[3], 1]),
           y = c(mesh$loc[id.nodeA[1], 2], mesh$loc[id.nodeA[2], 2], mesh$loc[id.nodeA[3], 2]))

A.y.vector <- c(mesh$loc[id.nodeA[[1]],][2],
                  mesh$loc[id.nodeA[[2]],][2],
                  mesh$loc[id.nodeA[[3]],][2])

A.tmp <- A[[which(A.y.vector > y.up)[1]]]
id.node <- id.nodeA[which(A.y.vector > y.up)[1]]
id.coord <- c(mesh$loc[id.node, 1], mesh$loc[id.node, 2])
return.list.up <- list(A.tmp = A.tmp, id.coord = id.coord, id.node = id.node)

## lower point, i.e. point in barrier area
A <- list()
A[[1]] <- inla.spde.make.A(mesh=mesh,
                     loc = matrix(c(location[2,1],y.up), nrow=1, ncol=2))
A[[2]] <- inla.spde.make.A(mesh=mesh,
                     loc = matrix(c(location[2,1],(y.up - max.edge.length/2)), nrow=1, ncol=2))
A[[3]] <- inla.spde.make.A(mesh=mesh,
                     loc = matrix(c(location[2,1],(y.up - max.edge.length)), nrow=1, ncol=2))
id.nodeA <- c()
id.nodeA[1] = which.max(A[[1]][1, ])
id.nodeA[2] = which.max(A[[2]][1, ])
id.nodeA[3] = which.max(A[[3]][1, ])

A.y.vector <- c(mesh$loc[id.nodeA[[1]],][2],
                  mesh$loc[id.nodeA[[2]],][2],
                  mesh$loc[id.nodeA[[3]],][2])

A.tmp <- A[[which(A.y.vector < y.up)[1]]]
id.node <- id.nodeA[which(A.y.vector < y.up)[1]]
id.coord <- c(mesh$loc[id.node, 1], mesh$loc[id.node, 2])

return.list.low <- list(A.tmp = A.tmp, id.coord = id.coord, id.node = id.node)

return.list <- list(normal.point = return.list.up, barrier.point = return.list.low)

##### Line 387

coord.df_norm <- return.list$normal.point$id.coord
coord.df_bar <- return.list$barrier.point$id.coord

points_nb <- rbind(coord.df_norm, coord.df_bar)
rownames(points_nb) <- NULL
colnames(points_nb) <- c("x", "y")
points_nb <- as.matrix(points_nb)
poly_nb <- Polygon(points_nb)
SpatialPoints(poly_nb@coords)

sp_points_nb <- SpatialPoints(poly_nb@coords)
sf_points_nb <- st_as_sf(sp_points_nb)

ggplot(data = pf$poly.water_sf) + 
      inlabru::gg(pf$mesh) + #plot mesh_hb alternatively
      geom_sf(data =sf_points_nb,
          col='purple',size=1.7,alpha=0.5) 

ggplot(data = pf$poly.water_sf) + 
      inlabru::gg(pf$mesh) +
  geom_sf(data =sf_points_nb,
          col='purple',size=1.7,alpha=0.5) +
  ylim(c(4,6.5)) +
  xlim(c(5.5,7.5))

return.list.right #<- return.list
coord.df_norm.right #<- coord.df_norm
coord.df_bar.right #<- coord.df_bar
```

## corr.from.Q function for two (or more) rb's

I need to calculate correlation for two points now, so pass a vector to solve instead of one Inode

```{r}
prior.range = c(3, 0.5)
prior.sigma = c(1, 0.1)
rb <- c(0.1, 0.8)
x <- rb
barrier.model2r <- inla.barrier.pcmatern.plus(mesh, 
                             fem, 
                             barrier.triangles, 
                             prior.range,
                             prior.sigma,
                             range.fraction = c(x[1],x[2])) 

Q <- inla.rgeneric.q(barrier.model2r, 
                     "Q",
                     theta = c(log(prior.sigma[1]),
                               log(prior.range[1])))
sd <- sqrt(diag(inla.qinv(Q)))

id.node <- list()
id.coord <- list()
in.id.node <- list()

id.node[[1]] = return.list.left$normal.point$id.node
id.node[[2]] = return.list.right$normal.point$id.node
id.coord[[1]] = return.list.left$normal.point$id.coord
id.coord[[2]] = return.list.right$normal.point$id.coord
in.id.node[[1]] = return.list.left$barrier.point$id.node
in.id.node[[2]] = return.list.right$barrier.point$id.node
```

```{r}
corr.from.Q.alltogether <- function(
    Q,
    id.node,
    in.id.node) {
  
  sd <- sqrt(diag(inla.qinv(Q)))
  Inode <- rep(0, dim(Q)[1])
  
  for (i in 1:length(id.node)) {
    Inode[id.node[[i]]] <- 1
  }
  
  covar.column <- solve(Q, Inode)

  corr <- list()
  corr2points <- list()
  for (i in 1:length(id.node)) {
    corr[[i]] = drop(matrix(covar.column))/(sd*sd[id.node[[i]]])
    corr2points[[i]] <- corr[[i]][in.id.node[[i]]]
  }
  
  return(corr2points)
}

#sd*sd[id.node[[i]]]=sd[in.id.node[[i]]]*sd[id.node[[i]]]
```

Test functions, 
if there's only one r `Q.simplified`, and `alltogether` should give the same result.

```{r}
# with just one pair of points, like if there was 1 r

test1r.simple <- 
  corr.from.Q.simplified(
    Q=Q,
    id.node = id.node[[1]],
    id.coord = id.coord[[1]], # I don't need this
    in.id.node = in.id.node[[1]])

test1r.all <- 
  corr.from.Q.alltogether(
    Q=Q,
    id.node = id.node[[1]],
    in.id.node = in.id.node[[1]])

test1r.simple; test1r.all

# 2 pair of points

Inode = rep(0, dim(Q)[1])
#Inode[c(id.node[[1]],id.node[[2]])] = 1
Inode[id.node[[1]]] = 1
Inode[id.node[[2]]] = 1

covar.column = solve(Q, Inode)
# compute correlations
corr <- list()
corr[[1]] = drop(matrix(covar.column)) / (sd*sd[id.node[[1]]])

corr[[2]] = drop(matrix(covar.column)) / (sd*sd[id.node[[2]]])

corr2pointsA <- c(corr[[1]][in.id.node[[1]]],
                 corr[[2]][in.id.node[[2]]])
#A from all together

test2r.all <- 
  corr.from.Q.alltogether(
    Q=Q,
    id.node = id.node,
    in.id.node = in.id.node)

corr2pointsA; test2r.all
```

## Draw the curve...

The following is to understand how different ranges in the barriers interact.

We have $$transparency = \frac{corr_b}{corr_{nb}}$$
Because I am choosing 2 points that are really close,
$$transparency \sim \frac{corr_b}{1}$$

```{r}
prior.range = c(3, 0.5) 
prior.sigma = c(1, 0.1)

x1 <- seq(0.01, 1, length.out = 10) #rb left
x2 <- seq(0.01, 1, length.out = 10) #rb right

barrier.model2 <- list()
corr.bm2 <- list()

for (i in seq_along(x1)) {
  barrier.model2[[i]] <- list()
  corr.bm2[[i]] <- list()
  for (j in seq_along(x2)) {
    barrier.model2[[i]][[j]] <- 
      inla.barrier.pcmatern.plus(mesh, 
                             fem, 
                             barrier.triangles, 
                             prior.range,
                             prior.sigma,
                             range.fraction = c(x1[i],x2[j]))
  
    Q <- inla.rgeneric.q(barrier.model2[[i]][[j]],
                       "Q",
                        theta = c(log(prior.sigma[1]),
                                  log(prior.range[1])))
  
    corr.bm2[[i]][[j]] <- corr.from.Q.alltogether(
      Q=Q,
      id.node = id.node,
      in.id.node = in.id.node)
    
  }
}

length(unlist(corr.bm2))

v1 <- list()
for (i in 1:10) {
  v1[[i]] <- rep(i, 20)
}

v2 <- list()
for (i in 1:10) {
  v2[[i]] <- rep(i, 2)
}

v11 <- list()
for (i in 1:10) {
  v11[[i]] <- rep(x1[i], 20)
}

v22 <- list()
for (i in 1:10) {
  v22[[i]] <- rep(x2[i], 2)
}

df10x10.r2 <- data.frame(corr = unlist(corr.bm2),
           pair = rep(c(1,2), 100),
           rb1.count = unlist(v1), #r_b left
           rb1 = unlist(v11),
           rb2.count = rep(unlist(v2), 10), #r_b right
           rb2 = rep(unlist(v22), 10)
           )

#df10x10.r2 <- 
  df10x10.r2 %>% 
  dplyr::mutate(fact.pair = as.factor(pair),
                fact.rb1 = as.factor(rb1),
                fact.rb2 = as.factor(rb2))
df1 <-
  df10x10.r2 %>% dplyr::filter(pair == 1)

#gg10x10_pair1 <- 
  ggplot(df1, aes(x = rb1, y = corr, color = fact.rb2)) +
    geom_line() +
    ggsci::scale_color_ucscgb() +
    ggtitle("10 r_b1 values by 10 r_b2 values") +
    xlab("r_b1") + ylab("corr(= ratio) pair of points 1") +
    labs(color = "r_b2")

df2 <-
  df10x10.r2 %>% dplyr::filter(pair == 2)

#gg10x10_pair2 <- 
  ggplot(df2, aes(x = rb2, y = corr, color = fact.rb1)) +
    geom_line() +
    ggsci::scale_color_ucscgb() +
    ggtitle("10 r_b1 values by 10 r_b2 values") +
    xlab("r_b2") + ylab("corr(= ratio) pair of points 2") +
    labs(color = "r_b1")
  
gg10x10_pair1;gg10x10_pair2

gridExtra::grid.arrange(gg10x10_pair1, gg10x10_pair2, nrow = 2)
```

### Reference correlation (corr nb) different than 1.

We have $$transparency = \frac{corr_b}{corr_{nb}}$$

```{r}
prior.range = c(3, 0.5) 
prior.sigma = c(1, 0.1)

x1 <- seq(0.01, 1, length.out = 10) #rb left
x2 <- seq(0.01, 1, length.out = 10) #rb right

nb.model <- inla.barrier.pcmatern.plus(mesh, 
                             fem, 
                             barrier.triangles, 
                             prior.range,
                             prior.sigma,
                             range.fraction = c(1,1))

Q.nb <- inla.rgeneric.q(nb.model, "Q", 
                          theta = c(log(prior.sigma[1]), log(prior.range[1])))

corr.nb <- 
    corr.from.Q.alltogether(Q = Q.nb,
                            id.node = id.node,
                            in.id.node = in.id.node)

df1 <-
  df10x10.r2 %>% dplyr::filter(pair == 1) %>% 
  dplyr::mutate(new.ratio = corr/unlist(corr.nb[1]))

#gg10x10_pair1_nb <- 
  ggplot(df1, aes(x = rb1, y = new.ratio, color = fact.rb2)) +
    geom_line() +
    ggsci::scale_color_ucscgb() +
    ggtitle("10 r_b1 values by 10 r_b2 values",
            subtitle = "ratio = corr/corr_nb with corr_nb different than 1") +
    xlab("r_b1") + ylab("ratio pair of points 1") +
    labs(color = "r_b2")

df2 <-
  df10x10.r2 %>% dplyr::filter(pair == 2) %>% 
  dplyr::mutate(new.ratio = corr/unlist(corr.nb[2]))

#gg10x10_pair2_nb <- 
  ggplot(df2, aes(x = rb2, y = new.ratio, color = fact.rb1)) +
    geom_line() +
    ggsci::scale_color_ucscgb() +
    ggtitle("10 r_b1 values by 10 r_b2 values",
            subtitle = "ratio = corr/corr_nb with corr_nb different than 1") +
    xlab("r_b2") + ylab("corr pair of points 2") +
    labs(color = "r_b1")

gridExtra::grid.arrange(gg10x10_pair1_nb, gg10x10_pair2_nb, nrow = 2)
gridExtra::grid.arrange(gg10x10_pair1,  
                        gg10x10_pair1_nb, 
                        nrow = 2)
gridExtra::grid.arrange(gg10x10_pair2,  
                        gg10x10_pair2_nb, 
                        nrow = 2)
```

## optim

```{r}
mesh
fem
barrier.triangles
prior.range = c(3, 0.5) 
prior.sigma = c(1, 0.1)

find.aimed.ratios <- function(x, aimed.ratio) {
  
  barrier.model <- inla.barrier.pcmatern.plus(
    mesh = mesh,
    fem = fem,
    barrier.triangles = barrier.triangles,
    prior.range = prior.range,
    prior.sigma = prior.sigma,
    range.fraction = x)
  
  Q <- inla.rgeneric.q(
    barrier.model, 
    "Q",
    theta = c(log(prior.sigma[1]), 
              log(prior.range[1])))
  
  corr.bm <- corr.from.Q.alltogether(
    Q = Q, 
    id.node = id.node, 
    in.id.node = in.id.node)
  
  A <- diag(aimed.ratio, nrow = length(aimed.ratio))
  B <- diag(corr.bm)
  M <- A-B
  mini <- norm(M, "F")
  
  return(mini)
}


find.x <- function(x) {
  
  barrier.model <- inla.barrier.pcmatern.plus(
    mesh = mesh,
    fem = fem,
    barrier.triangles = barrier.triangles,
    prior.range = prior.range,
    prior.sigma = prior.sigma,
    range.fraction = x)
  
  Q <- inla.rgeneric.q(
    barrier.model, 
    "Q",
    theta = c(log(prior.sigma[1]), 
              log(prior.range[1])))
  
  corr.bm <- corr.from.Q.alltogether(
    Q = Q, 
    id.node = id.node, 
    in.id.node = in.id.node)
  
  A <- diag(aim)
  B <- diag(corr.bm)
  M <- A-B
  mini <- norm(M, "F")
  
  return(mini)
}
```

```{r}
# TESTS
# test find.aimed.ratios function
prior.range = c(3, 0.5)
prior.sigma = c(1, 0.1)
rb <- c(0.1, 0.8) #use the same as test2r.all
x <- rb
aim <- c(0.1, 0.1)

find.aimed.ratios(x, aimed.ratio = aim)
#0.813839

# same as:
A <- diag(test2r.all)
B <- diag(c(0.1, 0.1))
M <- A-B
norm(M, "F")

# Test functions inside optim
# test find.aimed.ratios gives the same results as find.x when put inside optim

prior.range = c(3, 0.5)
prior.sigma = c(1, 0.1)
aim <- c(0.1, 0.1)

par = rep(0.5, length(aim))
optim(par = par, find.aimed.ratios, aimed.ratio = aim,
      method="L-BFGS-B",
      lower = c(0.01, 0.01), 
      upper = c(1,1))

optim(par = par, find.x,
      method="L-BFGS-B",
      lower = 0.01, upper = 1)
```

from `find.aimed.ratios`:
$par: [1] 0.1241002 0.1014245
$value: [1] 1.098811e-05
$counts: function gradient 
      38       38 
$convergence: [1] 0
$message: [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

from `find.x`
$par: [1] 0.1241002 0.1014245
$value: [1] 1.098811e-05
$counts: function gradient 
      38       38 
$convergence: [1] 0
$message: [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"


```{r}
x <- c(0.1, 0.8)
barrier.model <- inla.barrier.pcmatern.plus(
    mesh = mesh,
    fem = fem,
    barrier.triangles = barrier.triangles,
    prior.range = prior.range,
    prior.sigma = prior.sigma,
    range.fraction = x)
  
Q <- inla.rgeneric.q(
    barrier.model, 
    "Q",
    theta = c(log(prior.sigma[1]), 
              log(prior.range[1])))
  
test.optim <- corr.from.Q.alltogether(
    Q = Q, 
    id.node = id.node, 
    in.id.node = in.id.node)

# if I put test.optim as desired ratios I should get range fraction = 0.1, and 0.8

par = c(0.5, 0.5)
aim = c(0.01378133, 0.9092591)
optim(par = par, find.aimed.ratios, aimed.ratio = aim,
      method="L-BFGS-B",
      lower = 0.01, upper = 1)
```

$par: [1] 0.1000004 0.7999950
$value: [1] 1.762974e-06
$counts: function gradient 
      44       44 
$convergence: [1] 0
$message: [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

### Reference correlation (corr nb) different than 1

```{r}
prior.range = c(3, 0.5) 
prior.sigma = c(1, 0.1)

nb.model <- function(rbs, #rbs number of r_b
                     id.node = id.node, 
                     in.id.node = in.id.node) { 
  
  nb.model <- inla.barrier.pcmatern.plus(mesh, 
                             fem, 
                             barrier.triangles, 
                             prior.range,
                             prior.sigma,
                             range.fraction = rep(1, rbs))
  
  Q.nb <- inla.rgeneric.q(nb.model, "Q", 
                          theta = c(log(prior.sigma[1]), log(prior.range[1])))
  
  corr.nb <- 
    corr.from.Q.alltogether(Q = Q.nb,
                            id.node = id.node,
                            in.id.node = in.id.node)
  
  return(list(nb.model = nb.model, Q = Q.nb, corr = corr.nb))
}


find.aimed.ratios_ <- function(x, 
                               aimed.ratio,
                               corr.nb) {
  
  barrier.model <- inla.barrier.pcmatern.plus(
    mesh = mesh,
    fem = fem,
    barrier.triangles = barrier.triangles,
    prior.range = prior.range,
    prior.sigma = prior.sigma,
    range.fraction = x)
  
  Q <- inla.rgeneric.q(
    barrier.model, 
    "Q",
    theta = c(log(prior.sigma[1]), 
              log(prior.range[1])))
  
  corr.bm <- corr.from.Q.alltogether(
    Q = Q, 
    id.node = id.node, 
    in.id.node = in.id.node)
  
  corr <- c()
  for (i in seq_along(corr.bm)) {
    corr[i] <- corr.bm[[i]]/corr.nb[[i]]
  }
  
  A <- diag(aimed.ratio, nrow = length(aimed.ratio))
  B <- diag(corr, nrow = length(corr))
  M <- A-B
  mini <- norm(M, "F")
  
  return(mini)
}
```

```{r}
# TESTS
# test find.aimed.ratios_ function
prior.range = c(3, 0.5)
prior.sigma = c(1, 0.1)
rb <- c(0.1, 0.8) #use the same as test
x <- rb
aim <- c(0.1, 0.1)

corr.ref <- nb.model(rbs = 2, id.node = id.node, in.id.node = in.id.node)$corr

find.aimed.ratios_(x, aimed.ratio = aim, corr.nb = list(1,1)) == find.aimed.ratios(x, aimed.ratio = aim) # TRUE, 0.813839

find.aimed.ratios_(x, aimed.ratio = aim, corr.nb = corr.ref) # 0.8582385
```

```{r}
# Test functions inside optim
# same as find.aimed.ratios
par = rep(0.5, length(aim))
optim(par = par, find.aimed.ratios_, 
      aimed.ratio = aim, corr.nb = list(1,1),
      method="L-BFGS-B",
      lower = c(0.01, 0.01), 
      upper = c(1,1))
#$par: [1] 0.1241002 0.1014245

optim(par = par, find.aimed.ratios_, 
      aimed.ratio = aim, corr.nb = corr.ref,
      method="L-BFGS-B",
      lower = c(0.01, 0.01), 
      upper = c(1,1))
```

$par: [1] 0.1211923 0.1002895
$value: [1] 1.363308e-05
$counts: function gradient 
      58       58 
$convergence: [1] 0
$message: [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

```{r}
#test.optim line 635
corr_ <- c()
for (i in seq_along(test.optim)) {
  corr_[i] <- test.optim[[i]]/corr.ref[[i]]
}
# if I put test.optim as desired ratios I should get range fraction = 0.1, and 0.8
par = c(0.5, 0.5)
aim = corr_
optim(par = par, find.aimed.ratios_, 
      aimed.ratio = aim, corr.nb = corr.ref,
      method="L-BFGS-B",
      lower = c(0.01, 0.01), 
      upper = c(1,1))
```

$par: [1] 0.1000028 0.8000025
$value: [1] 1.13745e-05
$counts: function gradient 
      62       62 
$convergence: [1] 0
$message: [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"











