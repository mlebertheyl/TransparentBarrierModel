"0","rxy <- c(12, 12)"
"0","set.inla.seed <- 2303"
"0","n <- 20"
"0","max.edge.length = 0.4"
"0",""
"0","circle <- cbind("
"0","  cos(seq(0, 2*pi, length=50)) * 2 + 0.50 * rxy[1], "
"0","  sin(seq(0, 2*pi, length=50)) * 2 + 0.5 * rxy[2])"
"0",""
"0","poly <- Polygon(circle, hole = FALSE)"
"0","poly1 <- SpatialPolygons(list(Polygons(list(poly), ID = runif(1))))"
"0",""
"0","poly.original <- SpatialPolygons(c(poly1@polygons))"
"0",""
"0","loc1 <- matrix(c(0,0, 10,0, 0,10, 10,10), 4, 2, byrow = T)"
"0",""
"0","seg <- inla.sp2segment(poly1)"
"0","# - Transforms a SpatialPolygon to an ""inla polygon"""
"0","mesh <- inla.mesh.2d(loc=loc1, interior = seg, "
"0","                    max.e = max.edge.length, offset=1)"
"0",""
"0","tl <- length(mesh$graph$tv[,1])"
"0","# - the number of triangles in the mesh"
"0","posTri <- matrix(0, tl, 2)"
"0",""
"0","for (t in 1:tl){"
"0","  temp = mesh$loc[mesh$graph$tv[t, ], ]"
"0","  posTri[t,] = colMeans(temp)[c(1,2)] "
"0","}"
"0",""
"0","posTri <- SpatialPoints(posTri)"
"0","# - the positions of the triangle centers"
"0",""
"0","bar.original <- over(poly.original, SpatialPoints(posTri), returnList=T)"
"0","# - checking which mesh triangles are inside the barrier area"
"0","bar.original <- unlist(bar.original)"
"0","poly.bar.orginal <- inla.barrier.polygon(mesh, barrier.triangles = bar.original)"
"0","# - the Barrier model's polygon"
"0","# - in most cases this should be the same as poly.original"
"0",""
"0","# BARRIER 1"
"0","bar1 <- over(poly1, SpatialPoints(posTri), returnList=T)"
"0","# - checking which mesh triangles are inside the barrier area"
"0","bar1 <- unlist(bar1)"
"0","poly.bar1 <- inla.barrier.polygon(mesh, barrier.triangles = bar1)"
"0","# - the Barrier model's polygon"
"0","# - in most cases this should be the same as poly.original"
"0",""
"0","# PLOTS"
"0","mat <-  inla.barrier.fem.plus(mesh, list(bar1))"
"0",""
"0","poly1_h <- Polygon(circle, hole = TRUE)"
"0",""
"0","loc1 <- matrix(c(2,2, 10,2, 10,10, 2,10), 4, 2, byrow = T)"
"0",""
"0","locp <- Polygon(loc1, hole = FALSE)"
"0","    "
"0","poly.water <- SpatialPolygons(list(Polygons(list(locp, poly1_h), '0')))"
"0",""
"0","poly.water_sf <- st_as_sf(poly.water)"
"0","    "
"0","set.seed(set.inla.seed)"
"0","loc.data <- spsample(x = poly.water, n = n, type = ""random"")"
"0","loc.data_sf <- st_as_sf(loc.data)"
"0","loc.data <- loc.data@coords"
"0","    "
"0","mesh_h <-inla.mesh.2d(boundary = poly.water_sf,"
"0","                      max.e = max.edge.length, offset=1)"
"0","    "
"0","range = 2"
"0","fem <- mat"
"0","barrier.triangles <- list(bar1)"
"0","zlim = c(0.1, 1)"
"0","xlim = poly.water@bbox[1, ] "
"0","ylim = poly.water@bbox[2, ]"
"0",""
"0","proj = inla.mesh.projector(mesh, xlim = xlim, "
"0","                           ylim = ylim, dims=c(300, 300))"
"0",""
"0","ggplot(data = poly.water_sf) + "
"0","      inlabru::gg(mesh_h) + #plot mesh_hb alternatively"
"0","      geom_sf(data =loc.data_sf,"
"0","          col='purple',size=1.7,alpha=0.5) "
