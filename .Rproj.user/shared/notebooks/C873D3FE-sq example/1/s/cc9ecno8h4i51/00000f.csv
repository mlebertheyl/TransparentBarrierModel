"0","fx.pre.field
"
"1","function(
"
"1","    smalldist = 0.5, 
"
"1","    width = c(0.4, 0.4), 
"
"1","    max.edge.length = 0.4,
"
"1","    set.inla.seed = 2303,
"
"1","    loc.data = FALSE,
"
"1","    n = 100 # only if loc.data is TRUE
"
"1","    ){
"
"1","  
"
"1","  poly1 <- local.square.polygon(xlim=c(-1, 5-smalldist/2), 
"
"1","                          ylim=5+width[1]*c(-.5, .5))
"
"1","  poly2 <- local.square.polygon(xlim=c(5+smalldist/2, 11), 
"
"1","                          ylim=5+width[2]*c(-.5, .5))
"
"1","  poly.original <- SpatialPolygons(c(poly1@polygons, poly2@polygons))
"
"1","  
"
"1","  loc1 <- matrix(c(0,0, 10,0, 0,10, 10,10), 4, 2, byrow = T)
"
"1","  
"
"1","  seg <- inla.sp2segment(poly.original)
"
"1","# - Transforms a SpatialPolygon to an ""inla polygon""
"
"1","  mesh <- inla.mesh.2d(loc=loc1, interior = seg, 
"
"1","                    max.e = max.edge.length, offset=1)
"
"1","
"
"1","  tl <- length(mesh$graph$tv[,1])
"
"1","# - the number of triangles in the mesh
"
"1","  posTri <- matrix(0, tl, 2)
"
"1","
"
"1","  for (t in 1:tl){
"
"1","    temp = mesh$loc[mesh$graph$tv[t, ], ]
"
"1","    posTri[t,] = colMeans(temp)[c(1,2)] 
"
"1","    }
"
"1","
"
"1","  posTri <- SpatialPoints(posTri)
"
"1","# - the positions of the triangle centers
"
"1","
"
"1","  bar.original <- over(poly.original, SpatialPoints(posTri), returnList=T)
"
"1","# - checking which mesh triangles are inside the barrier area
"
"1","  bar.original <- unlist(bar.original)
"
"1","  poly.bar.orginal <- inla.barrier.polygon(mesh, barrier.triangles = bar.original)
"
"1","# - the Barrier model's polygon
"
"1","# - in most cases this should be the same as poly.original
"
"1","
"
"1","# BARRIER 1
"
"1","  bar1 <- over(poly1, SpatialPoints(posTri), returnList=T)
"
"1","# - checking which mesh triangles are inside the barrier area
"
"1","  bar1 <- unlist(bar1)
"
"1","  poly.bar1 <- inla.barrier.polygon(mesh, barrier.triangles = bar1)
"
"1","# - the Barrier model's polygon
"
"1","# - in most cases this should be the same as poly.original
"
"1","
"
"1","# BARRIER 2
"
"1","  bar2 <- over(poly2, SpatialPoints(posTri), returnList=T)
"
"1","# - checking which mesh triangles are inside the barrier area
"
"1","  bar2 <- unlist(bar2)
"
"1","  poly.bar2 <- inla.barrier.polygon(mesh, barrier.triangles = bar2)
"
"1","
"
"1","# PLOTS
"
"1","  mat <-  inla.barrier.fem.plus(mesh, list(bar1, bar2))
"
"1","  
"
"1","  if(loc.data == TRUE){
"
"1","    
"
"1","    poly1_h <- local.square.polygon_T(xlim=c(2, 5-smalldist/2), 
"
"1","                          ylim=5+width[1]*c(-.5, .5))
"
"1","
"
"1","    poly2_h <- local.square.polygon_T(xlim=c(5+smalldist/2, 8), 
"
"1","                          ylim=5+width[2]*c(-.5, .5))
"
"1","    loc1 <- matrix(c(2,2, 8,2, 8,8, 2,8), 4, 2, byrow = T)
"
"1","
"
"1","    locp <- Polygon(loc1, hole = FALSE)
"
"1","    
"
"1","    poly.water <- SpatialPolygons(list(Polygons(list(locp, poly1_h, poly2_h), '0')))
"
"1","    poly.water_sf <- st_as_sf(poly.water)
"
"1","    
"
"1","    set.seed(set.inla.seed)
"
"1","    loc.data <- spsample(x = poly.water, n = n, type = ""random"")
"
"1","    loc.data_sf <- st_as_sf(loc.data)
"
"1","    loc.data <- loc.data@coords
"
"1","    
"
"1","    mesh_h <-inla.mesh.2d(boundary = poly.water_sf, 
"
"1","             max.e = max.edge.length, offset=1)
"
"1","    
"
"1","    return(list(poly1 = poly1, 
"
"1","              poly2 = poly2, 
"
"1","              poly.original = poly.original, 
"
"1","              mesh = mesh, 
"
"1","              posTri = posTri, 
"
"1","              poly.bar.orginal = poly.bar.orginal, 
"
"1","              bar1 = bar1, 
"
"1","              bar2 = bar2, 
"
"1","              mat = mat,
"
"1","              loc.data = loc.data,
"
"1","              poly.water = poly.water,
"
"1","              poly.water_sf = poly.water_sf,
"
"1","              mesh_h = mesh_h,
"
"1","              loc.data_sf = loc.data_sf))
"
"1","  }
"
"1","  
"
"1","  if(loc.data == FALSE) {
"
"1","   
"
"1","    return(list(poly1 = poly1, 
"
"1","              poly2 = poly2, 
"
"1","              poly.original = poly.original, 
"
"1","              mesh = mesh, 
"
"1","              posTri = posTri, 
"
"1","              poly.bar.orginal = poly.bar.orginal, 
"
"1","              bar1 = bar1, 
"
"1","              bar2 = bar2, 
"
"1","              mat = mat)) 
"
"1","  }
"
"1","}
"
"1","<bytecode: 0x1130b7890>
"
