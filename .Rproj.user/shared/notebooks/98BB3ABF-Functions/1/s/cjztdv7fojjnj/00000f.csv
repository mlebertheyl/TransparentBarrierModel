"0","fx.pre.field <- function("
"0","    smalldist = 0.5, "
"0","    width = c(0.4, 0.4), "
"0","    max.edge.length = 0.4,"
"0","    set.inla.seed = 2303,"
"0","    loc.data = FALSE,"
"0","    n = 100 # only if loc.data is TRUE"
"0","    ){"
"0","  "
"0","  poly1 <- local.square.polygon(xlim=c(-1, 5-smalldist/2), "
"0","                          ylim=5+width[1]*c(-.5, .5))"
"0","  poly2 <- local.square.polygon(xlim=c(5+smalldist/2, 11), "
"0","                          ylim=5+width[2]*c(-.5, .5))"
"0","  poly.original <- SpatialPolygons(c(poly1@polygons, poly2@polygons))"
"0","  "
"0","  loc1 <- matrix(c(0,0, 10,0, 0,10, 10,10), 4, 2, byrow = T)"
"0","  "
"0","  seg <- inla.sp2segment(poly.original)"
"0","# - Transforms a SpatialPolygon to an ""inla polygon"""
"0","  mesh <- inla.mesh.2d(loc=loc1, interior = seg, "
"0","                    max.e = max.edge.length, offset=1)"
"0",""
"0","  tl <- length(mesh$graph$tv[,1])"
"0","# - the number of triangles in the mesh"
"0","  posTri <- matrix(0, tl, 2)"
"0",""
"0","  for (t in 1:tl){"
"0","    temp = mesh$loc[mesh$graph$tv[t, ], ]"
"0","    posTri[t,] = colMeans(temp)[c(1,2)] "
"0","    }"
"0",""
"0","  posTri <- SpatialPoints(posTri)"
"0","# - the positions of the triangle centers"
"0",""
"0","  bar.original <- over(poly.original, SpatialPoints(posTri), returnList=T)"
"0","# - checking which mesh triangles are inside the barrier area"
"0","  bar.original <- unlist(bar.original)"
"0","  poly.bar.orginal <- inla.barrier.polygon(mesh, barrier.triangles = bar.original)"
"0","# - the Barrier model's polygon"
"0","# - in most cases this should be the same as poly.original"
"0",""
"0","# BARRIER 1"
"0","  bar1 <- over(poly1, SpatialPoints(posTri), returnList=T)"
"0","# - checking which mesh triangles are inside the barrier area"
"0","  bar1 <- unlist(bar1)"
"0","  poly.bar1 <- inla.barrier.polygon(mesh, barrier.triangles = bar1)"
"0","# - the Barrier model's polygon"
"0","# - in most cases this should be the same as poly.original"
"0",""
"0","# BARRIER 2"
"0","  bar2 <- over(poly2, SpatialPoints(posTri), returnList=T)"
"0","# - checking which mesh triangles are inside the barrier area"
"0","  bar2 <- unlist(bar2)"
"0","  poly.bar2 <- inla.barrier.polygon(mesh, barrier.triangles = bar2)"
"0",""
"0","# PLOTS"
"0","  mat <-  inla.barrier.fem.plus(mesh, list(bar1, bar2))"
"0","  "
"0","  if(loc.data == TRUE){"
"0","    "
"0","    poly1_h <- local.square.polygon_T(xlim=c(2, 5-smalldist/2), "
"0","                          ylim=5+width[1]*c(-.5, .5))"
"0",""
"0","    poly2_h <- local.square.polygon_T(xlim=c(5+smalldist/2, 8), "
"0","                          ylim=5+width[2]*c(-.5, .5))"
"0","    loc1 <- matrix(c(2,2, 8,2, 8,8, 2,8), 4, 2, byrow = T)"
"0",""
"0","    locp <- Polygon(loc1, hole = FALSE)"
"0","    "
"0","    poly.water <- SpatialPolygons(list(Polygons(list(locp, poly1_h, poly2_h), '0')))"
"0","    poly.water_sf <- st_as_sf(poly.water)"
"0","    "
"0","    set.seed(set.inla.seed)"
"0","    loc.data <- spsample(x = poly.water, n = n, type = ""random"")"
"0","    loc.data_sf <- st_as_sf(loc.data)"
"0","    loc.data <- loc.data@coords"
"0","    "
"0","    mesh_h <-inla.mesh.2d(boundary = poly.water_sf, "
"0","             max.e = max.edge.length, offset=1)"
"0","    "
"0","    return(list(poly1 = poly1, "
"0","              poly2 = poly2, "
"0","              poly.original = poly.original, "
"0","              mesh = mesh, "
"0","              posTri = posTri, "
"0","              poly.bar.orginal = poly.bar.orginal, "
"0","              bar1 = bar1, "
"0","              bar2 = bar2, "
"0","              mat = mat,"
"0","              loc.data = loc.data,"
"0","              poly.water = poly.water,"
"0","              poly.water_sf = poly.water_sf,"
"0","              mesh_h = mesh_h,"
"0","              loc.data_sf = loc.data_sf))"
"0","  }"
"0","  "
"0","  if(loc.data == FALSE) {"
"0","   "
"0","    return(list(poly1 = poly1, "
"0","              poly2 = poly2, "
"0","              poly.original = poly.original, "
"0","              mesh = mesh, "
"0","              posTri = posTri, "
"0","              poly.bar.orginal = poly.bar.orginal, "
"0","              bar1 = bar1, "
"0","              bar2 = bar2, "
"0","              mat = mat)) "
"0","  }"
"0","}"
"0",""
